/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/llimon/argo-scheduler/pkg/apis/argoscheduler/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArgoSchedulerLister helps list ArgoSchedulers.
type ArgoSchedulerLister interface {
	// List lists all ArgoSchedulers in the indexer.
	List(selector labels.Selector) (ret []*v1.ArgoScheduler, err error)
	// ArgoSchedulers returns an object that can list and get ArgoSchedulers.
	ArgoSchedulers(namespace string) ArgoSchedulerNamespaceLister
	ArgoSchedulerListerExpansion
}

// argoSchedulerLister implements the ArgoSchedulerLister interface.
type argoSchedulerLister struct {
	indexer cache.Indexer
}

// NewArgoSchedulerLister returns a new ArgoSchedulerLister.
func NewArgoSchedulerLister(indexer cache.Indexer) ArgoSchedulerLister {
	return &argoSchedulerLister{indexer: indexer}
}

// List lists all ArgoSchedulers in the indexer.
func (s *argoSchedulerLister) List(selector labels.Selector) (ret []*v1.ArgoScheduler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ArgoScheduler))
	})
	return ret, err
}

// ArgoSchedulers returns an object that can list and get ArgoSchedulers.
func (s *argoSchedulerLister) ArgoSchedulers(namespace string) ArgoSchedulerNamespaceLister {
	return argoSchedulerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArgoSchedulerNamespaceLister helps list and get ArgoSchedulers.
type ArgoSchedulerNamespaceLister interface {
	// List lists all ArgoSchedulers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ArgoScheduler, err error)
	// Get retrieves the ArgoScheduler from the indexer for a given namespace and name.
	Get(name string) (*v1.ArgoScheduler, error)
	ArgoSchedulerNamespaceListerExpansion
}

// argoSchedulerNamespaceLister implements the ArgoSchedulerNamespaceLister
// interface.
type argoSchedulerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ArgoSchedulers in the indexer for a given namespace.
func (s argoSchedulerNamespaceLister) List(selector labels.Selector) (ret []*v1.ArgoScheduler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ArgoScheduler))
	})
	return ret, err
}

// Get retrieves the ArgoScheduler from the indexer for a given namespace and name.
func (s argoSchedulerNamespaceLister) Get(name string) (*v1.ArgoScheduler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("argoscheduler"), name)
	}
	return obj.(*v1.ArgoScheduler), nil
}
